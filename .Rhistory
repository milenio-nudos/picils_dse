name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 5), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")
# Create the plot
ggplot(plot_data, aes(y = CNTRY, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNTRY), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 8), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")
# SEM por separado para cada país
lista_paises <- unique(unlist(pisa$CNT))
resultados_lista <- list()
summary_lista <- list()
# Iteramos por cada país con el mismo modelo
for (pais_actual in lista_paises) {
format(Sys.time(), tz = "Chile/Continental")
datos_pais <- pisa %>%
filter(CNT == pais_actual)
fit_pais <- tryCatch({
sem(model = multigroup_cfa,
data = datos_pais,
ordered = TRUE
# missing = "fiml"
)
}, error = function(e) {
cat("  -> ¡ERROR! No se pudo ajustar el modelo para", pais_actual, ". Razón:", conditionMessage(e), "\n")
return(NULL)
})
if (!is.null(fit_pais)) {
if (lavInspect(fit_pais, "converged")) {
medidas_ajuste <- fitMeasures(fit_pais)
resultados_lista[[pais_actual]] <- medidas_ajuste
} else {
cat("  -> ¡ADVERTENCIA! El modelo para", pais_actual, "no convergió. Se omitirán sus resultados.\n")
resultados_lista[[pais_actual]] <- rep(NA)
}
}
format(Sys.time(), tz = "Chile/Continental")
}
### Test con chile (o otros países)
datos_test <- pisa %>%
filter(CNT == "CHL")
test_model <- sem(model = multigroup_cfa,
data = datos_test,
ordered = TRUE)
#| echo: false
#| warning: false
beeswarm_plot <- pisa22ict|>
group_by(CNT)|>
summarise(mean_geneff = mean(effgen, na.rm = T),
mean_speceff = mean(effspec, na.rm = T))|>
ungroup()|>
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "score")
# Seteo de sesión
#install.packages("pacman")
library(pacman)
pacman::p_load(
dplyr, haven, sjlabelled,  psych,  purrr,  tidyr,  sjPlot,  ggplot2, ggbeeswarm,
parameters,  table1,  car,  beeswarm,  lme4, scales, ggrepel, corrplot,
ggtext, patchwork, lavaan, semTools, DT, knitr, kableExtra)
options(scipen = 999)
rm(list = ls())
icils23_proc <- readRDS(here::here("~/GitHub/milenio_nudos/picils_dse/input/data/proc_data/icils23_proc.rds"))
pisa22ict <- readRDS(here::here("input/data/proc_data/pisa22_proc.rds"))
pisa22ict <- pisa22ict |>
mutate(
effgen = rowMeans(across(c(search_info, evaluate_info, collect_data,
explain_content, share_content, pair_collab,
write_text,create_media, change_settings)),
na.rm = TRUE),
effspec = rowMeans(across(c(programming, develop_webpage)),
na.rm = TRUE)
)
icils23_proc <- icils23_proc|>
mutate(
effgen = rowMeans(across(c(search_info, source_info, evaluate_info, install_app,
share_content, write_text,
create_media, insert_image, edit_image)),
na.rm = TRUE),
effspec = rowMeans(across(c(programming, visual_coding, develop_webpage)),
na.rm = TRUE)
)
#| echo: false
#| warning: false
beeswarm_plot <- pisa22ict|>
group_by(CNT)|>
summarise(mean_geneff = mean(effgen, na.rm = T),
mean_speceff = mean(effspec, na.rm = T))|>
ungroup()|>
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "score")
beeswarm_labels <-
rbind(
beeswarm_plot%>%
group_by(type) %>%
arrange(score) %>%
slice(c(1:3, (n() - 2):n())) %>% # First five and last five countries
ungroup() %>%
mutate(CNT = to_label(CNT)),
beeswarm_plot%>%
filter(CNT %in% c("CHL"))%>%
mutate(CNT = to_label(CNT))%>%
slice(-3)
)
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNT), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.51")
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNT), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.51") +
scale_y_continuous(breaks = c(2,4))
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNT), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.51") +
scale_y_continuous(breaks = c(2,2.5,3,3.5,4))
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNTRY), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.47")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4))
#| echo: false
#| warning: false
beeswarm_plot <- icils23_proc|>
group_by(CNTRY)|>
summarise(mean_geneff = mean(effgen, na.rm = T),
mean_speceff = mean(effspec, na.rm = T))|>
ungroup()|>
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "score")
beeswarm_labels <- beeswarm_plot%>%
group_by(type) %>%
arrange(score) %>%
slice(c(1:3, (n() - 2):n())) %>% # First five and last five countries
ungroup() %>%
mutate(CNT = to_label(CNTRY))
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNTRY), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.47")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4))
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNT), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.51") +
scale_y_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
ggplot(beeswarm_plot, aes(y = score, x = type, color = type)) +
geom_beeswarm(size = 2) +
geom_text_repel(
data = beeswarm_labels, # Use only the filtered data for labels
aes(label = CNTRY), # Add country labels
hjust = -0.2, vjust = 0.5, size = 5, color = "black"
) +
scale_color_manual(values = c("#5f5758","#fe3057")) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
legend.position = "none",
plot.caption = element_text(size = 15)
) +
scale_x_discrete(labels = c("General DSE", "Specialized DSE")) +
labs(caption = "r = 0.47")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4))+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
# Create the plot
ggplot(plot_data, aes(y = CNT, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNT), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
scale_y_discrete(labels = y_axis_labels) +  # Customize y-axis labels
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 5, color = y_axis_colors), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
#| echo: false
#| warning: false
# Add the latam column to the data (assuming it exists in pisa22ict)
pisa22ict <- pisa22ict %>%
mutate(latam = ifelse(CNT %in% c("CHL", "MAR"), 1, 0))
# Prepare the data for plotting
plot_data <- pisa22ict |>
group_by(CNT, sex) |>
summarise(
"General DSE" = mean(effgen, na.rm = TRUE),
"Specialized DSE" = mean(effspec, na.rm = TRUE)
) |>
pivot_longer(
cols = 3:4,
names_to = "type",
values_to = "score"
) |>
ungroup() |>
mutate(sex = to_label(sex)) |>
drop_na()
# Reorder the data by score for each type
plot_data <- plot_data %>%
group_by(type) %>%
arrange(score) %>%
mutate(CNT = factor(CNT, levels = unique(CNT))) %>%
ungroup()
# Identify Latin American countries
latam_countries <- c("MAR", "CHL")
# Get all non-Latin American countries
non_latam_countries <- unique(as.character(plot_data$CNT[!plot_data$CNT %in% latam_countries]))
# Select unpaired (odd-indexed) non-Latin American countries
selected_non_latam <- non_latam_countries[seq(1, length(non_latam_countries), by = 2)]
# Combine Latin American and selected non-Latin American countries
selected_countries <- c(latam_countries, selected_non_latam)
# Ya no ocultamos labels
y_axis_labels <- levels(plot_data$CNT)
# Mantenemos el color rojo para CHL y MAR
y_axis_colors <- ifelse(y_axis_labels %in% latam_countries, "#FE3057", "black")
# Create the plot
ggplot(plot_data, aes(y = CNT, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNT), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
scale_y_discrete(labels = y_axis_labels) +  # Customize y-axis labels
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 5, color = y_axis_colors), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
# Create the plot
ggplot(plot_data, aes(y = CNT, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNT), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
scale_y_discrete(labels = y_axis_labels) +  # Customize y-axis labels
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 5, color = y_axis_colors), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")+
scale_x_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
#| echo: false
#| warning: false
# Prepare the data for plotting
plot_data <- icils23_proc|>
group_by(CNTRY, IS3G02) |>
summarise(
"General DSE" = mean(effgen, na.rm = TRUE),
"Specialized DSE" = mean(effspec, na.rm = TRUE)
) |>
pivot_longer(
cols = 3:4,
names_to = "type",
values_to = "score"
) |>
ungroup() |>
mutate(sex = to_label(IS3G02)) |>
drop_na()
# Reorder the data by score for each type
plot_data <- plot_data %>%
group_by(type) %>%
arrange(score) %>%
mutate(CNTRY = factor(CNTRY, levels = unique(CNTRY))) %>%
ungroup()
# Create the plot
ggplot(plot_data, aes(y = CNTRY, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNTRY), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 8), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")+
scale_y_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
# Create the plot
ggplot(plot_data, aes(y = CNTRY, x = score)) +  # Use CNT directly (already reordered)
facet_grid(~type, scales = "free_y") +  # Allow y-axis to be independent for each facet
geom_line(aes(group = CNTRY), size = 0.5) +
geom_point(aes(color = sex, shape = sex), size = 2) +
scale_color_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = "#FE3057", "Male" = "#5f5758")) +
scale_shape_manual(
name = "Gender",
labels = c("Female", "Male"),
values = c("Female" = 16, "Male" = 17)) +
labs(color = "Género") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.position = "top",
axis.text.y = element_text(size = 8), # Apply conditional colors
plot.margin = margin(0, 0, 0, 0),
panel.spacing = unit(1, "lines"),
text = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_cartesian(clip = "off")+
scale_x_continuous(breaks = c(2,2.5,3,3.5,4), limits = c(2,4))
[^4]: Research Assistant on NUDOS. Master on Sociology of Modernization, Sociology Department, University of Chile.
openxlsx::read.xlsx("input/tbl/ulfert_selfeff_scale.xlsx", fillMergedCells = TRUE)|>
knitr::kable()
